#!/bin/bash

set -e

HERE=$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")

function pa() {
  
  #prerequirements
  apt-get update && apt-get install -y apt-transport-https ca-certificates curl
  sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
  echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

  #install last version of kube* packages
  apt-get install -y kubelet kubeadm kubectl

  # apply sysctl changes
  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-ip6tables = 1
  net.bridge.bridge-nf-call-iptables = 1
  net.ipv4.ip_forward = 1
EOF
  
  sysctl -a

}

function sw() {
  
  #kubelet does not work unless you disable swap
  swapoff -a
  #make swap disable persistent to reboots
  sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
}

# this package conflicts with cni so we remove it
#apt-get purge -y containernetworking-plugins && apt-get install -y containerd.io
#enable cri on config.tom created by containerd
#enable systemd cgroup
#cp $HERE/manifests/containerd/config.toml /etc/containerd/config.toml && systemctl restart containerd


function ku() {

  #enable kubelet and configure systemd cgroup
  cp $HERE/manifests/kubelet/kubelet.service /lib/systemd/system/kubelet.service
  systemctl daemon-reload && systemctl enable kubelet
  systemctl status kubelet && journalctl -xeu kubelet
}


function in() {
  #init ctrl plane scheduler etcd and kubelet
  #sudo kubeadm init --config=kubeadm-config.yaml --apiserver-advertise-address=192.168.1.134 --pod-network-cidr=10.244.0.0/16 --cri-socket=/run/containerd/containerd.sock
  #kubectl delete node hack-things
  #kubeadm init --config $HERE/manifests/kubeadm-config.yaml --v=9

  #crio
  systemctl start crio && systemctl enable crio
  kubeadm init --config $HERE/manifests/kubeadmcrio-config.yaml --v=9

  #to start using your cluster as root
  export KUBECONFIG=/etc/kubernetes/admin.conf

  #use ctrl plane node as worker as well
  kubectl taint nodes --all node-role.kubernetes.io/master-

}

function sdn {
  #deploy cni and check CIDR is equivalent to the one in the yml file
  kubectl apply -f $HERE/manifests/kube-flannel.yml
}

function cl(){
  #clean k8s cluster
  kubectl drain <node name> --delete-emptydir-data --force --ignore-daemonsets

  # kill the 1 node cluster specify the cri socket
  kubeadm reset -f --v=9 --cri-socket /var/run/crio/crio.sock

  #only if I am not root
  rm -rf /root/.kube/
}

function mu(){
	# git clone repo
	# cd multusctl/multusctl
	# go build
  # install SDN
  kubectl create -f  $HERE/assets/kube-flannel.yml
 
  #create macvlan bridge
  sudo ip link add data-plane-vlan link $MASTER_IFACE type macvlan mode bridge
  sudo ip link set data-plane-vlan up

  #install multus
  ./multusctl install --wait
  #create network attachment called 'netat' 
  ./multusctl create netat --url=./assets/config-macvlan.yml

  #create pod using data-plane-vlan using the new network attachment
  kubectl create -f ./assets/pod.yml 
  #install multus
	#./multusctl --wait 
	#./multusctl create netat --url=assets/config.yaml
  #./multusctl list
  #./multusctl get myattachment
}

pa
sw
ku
in

#mu
#clean cluster
#cl